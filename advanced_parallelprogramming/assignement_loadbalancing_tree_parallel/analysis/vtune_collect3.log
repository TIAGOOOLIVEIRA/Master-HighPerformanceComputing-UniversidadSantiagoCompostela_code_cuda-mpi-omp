[curso370@c206-3 load_balance]$ vtune -collect performance-snapshot -collect memory-access -collect hotspots -collect threading -- ./ppa_project_par
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /mnt/netapp2/Home_FT2/home/ulc/cursos/curso370/app/load_balance/r000ps -command stop.
Nnodes=518357712 Creation time=142.479
[Sequential] Search Time=190.034
[Sequential] Value=942903076611
[Sequential] Test OK
[Parallel] Search Time=449.032
[Parallel] Value=942903076611
[Parallel] Test OK
vtune: Collection stopped.
vtune: Using result path `/mnt/netapp2/Home_FT2/home/ulc/cursos/curso370/app/load_balance/r000ps'
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 833.018s
    IPC: 2.530
    SP GFLOPS: 0.001
    DP GFLOPS: 0.010
    Average CPU Frequency: 2.800 GHz
Logical Core Utilization: 1.5% (0.976 out of 64)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization. Consider improving physical core utilization as the first step
 | and then look at opportunities to utilize logical cores, which in some cases
 | can improve processor throughput and overall performance of multi-threaded
 | applications.
 |
    Physical Core Utilization: 1.5% (0.975 out of 64)
     | The metric value is low, which may signal a poor physical CPU cores
     | utilization caused by:
     |     - load imbalance
     |     - threading runtime overhead
     |     - contended synchronization
     |     - thread/process underutilization
     |     - incorrect affinity that utilizes logical cores instead of physical
     |       cores
     | Run the HPC Performance Characterization analysis to estimate the
     | efficiency of MPI and OpenMP parallelism or run the Locks and Waits
     | analysis to identify parallel bottlenecks for other parallel runtimes.
     |
Microarchitecture Usage: 59.4% of Pipeline Slots
    Retiring: 59.4% of Pipeline Slots
    Front-End Bound: 17.1% of Pipeline Slots
     | Issue: A significant portion of Pipeline Slots is remaining empty due to
     | issues in the Front-End.
     | 
     | Tips:  Make sure the code working size is not too large, the code layout
     | does not require too many memory accesses per cycle to get enough
     | instructions for filling four pipeline slots, or check for microcode
     | assists.
     |
    Bad Speculation: 2.6% of Pipeline Slots
    Back-End Bound: 20.9% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 8.7% of Pipeline Slots
            L1 Bound: 4.1% of Clockticks
            L2 Bound: 0.1% of Clockticks
            L3 Bound: 0.2% of Clockticks
                L3 Latency: 0.1% of Clockticks
            DRAM Bound: 1.1% of Clockticks
                Memory Bandwidth: 0.6% of Clockticks
                Memory Latency: 3.8% of Clockticks
                    Local DRAM: 0.9% of Clockticks
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 8.2% of Clockticks
        Core Bound: 12.3% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
Memory Bound: 8.7% of Pipeline Slots
    Cache Bound: 4.4% of Clockticks
    DRAM Bound: 1.1% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 28.6% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
                512-bit: 0.0% from SP FP
            Scalar: 100.0% from SP FP
        DP FLOPs: 0.1% of uOps
            Packed: 33.3% from DP FP
                128-bit: 33.3% from DP FP
                256-bit: 0.0% from DP FP
                512-bit: 0.0% from DP FP
            Scalar: 66.7% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 99.9% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.004
    FP Arith/Mem Wr Instr. Ratio: 0.004
Collection and Platform Info
    Application Command Line: ./ppa_project_par 
    Operating System: 4.18.0-305.3.1.el8_4.x86_64 \S Kernel \r on an \m 
    Computer Name: c206-3
    Result Size: 3.5 MB 
    Collection start time: 01:06:06 31/03/2025 UTC
    Collection stop time: 01:20:00 31/03/2025 UTC
    Collector Type: Driverless Perf per-process counting
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 2.200 GHz
        Logical CPU Count: 64
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

Recommendations:
    Hotspots: Start with Hotspots analysis to understand the efficiency of your algorithm.
     | Use Hotspots analysis to identify the most time consuming functions.
     | Drill down to see the time spent on every line of code.
    Threading: There is poor utilization of logical CPU cores (1.5%) in your application.
     |  Use Threading to explore more opportunities to increase parallelism in
     | your application.

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % done                                            
[curso370@c206-3 load_balance]$ 